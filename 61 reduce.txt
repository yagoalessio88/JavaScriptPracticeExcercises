




-----------------------reduce






iterates, uses a callback function

reduces (the values in the array) to a single value (can be a number, array, object)

1 parameter ('acc') - total of all calculations   *accumulator

2 parameter ('curr') - current iteration value      *current

we have to decide what is the value that we are returning right after the callback function

                 return a number            reduce(function(){},0)    (seting up the initial value, in this case 0)
		return an array	 	    reduce(function(){},[])
		return an object            reduce(function(){},{})


you ALWAYS want to return the accumulator

	const total = people.reduce(function(acc, currItem){
	return acc
},0);










const people = [
	{ name: 'bob', age:20, position: 'developer', id: 1, salary: 200 },
	{ name: 'peter', age:25, position: 'designer', id: 2, salary: 300 },
	{ name: 'susy', age:30, position: 'the boss', id: 3, salary: 500 }
];



const total = people.reduce(function(acc, currItem){
	console.log(`total ${acc}`);
	console.log(`current money : ${currentItem.salary}`);
	acc += currentItem.salary;
	return acc;
},0);


returns

total 0
current money : 200
total 200 
current money : 300
total 500
current money : 500
1000


 